import { Effect } from "./base";
import {
  Types,
  BuffTypes,
  triggerClauseType,
  SkillClassType,
} from "../../enums";
import { Character } from "../character";
import { Skill } from "../skill";
import { Arena } from "../../arena";

export class Invulnerability extends Effect {
  private invulToSkillClass: SkillClassType;
  private invulToSpecifSkill: number;
  private invulToHarmful: boolean;
  private invulToFriendly: boolean;
  private skillName: string;

  constructor(data: any, caster: number) {
    super(data, caster);
    this.invulToFriendly = data.invulToFriendly || null;
    this.invulToHarmful = data.invulToHarmful || null;
    this.invulToSpecifSkill = data.invulToSpecifSkill || null;
    this.invulToSkillClass = data.invulToSkillClass || null;
  }

  public functionality(char: Character, origin: Skill) {
    this.triggered = true;
    const invul = char.getBuffs().invulnerability;
    const blocked = char.getDebuffs().ignoreInvulnerability;
    if (blocked) {
      if (this.invulToSpecifSkill) {
        const skillName = this.arenaReference
          .findCharacterById(this.caster)
          .char.findSkillById(this.invulToSpecifSkill).name;
        invul.toSpecificSkill.add(this.invulToSpecifSkill);
        this.skillName = skillName;
      }
      return;
    }

    if (this.invulToFriendly) invul.toFriendly = true;
    else if (this.invulToHarmful) invul.toHarmful = true;
    else if (this.invulToSkillClass)
      invul.toSkillClass.add(this.invulToSkillClass);
    else if (this.invulToSpecifSkill) {
      const skillName = this.arenaReference
        .findCharacterById(this.caster)
        .char.findSkillById(this.invulToSpecifSkill).name;
      invul.toSpecificSkill.add(this.invulToSpecifSkill);
      this.skillName = skillName;
    }
  }

  public generateToolTip() {
    if (this.invulToSpecifSkill) {
      this.message = `'${this.skillName}' can't be used on this character`;
    } else if (this.invulToSkillClass) {
      this.message = `This character is invulnerable to ${
        SkillClassType[this.invulToSkillClass]
      } skills`;
    } else if (this.invulToHarmful) {
      this.message = `This character is invulnerable`;
    } else if (this.invulToFriendly) {
      this.message = `This character is invulnerable to friendly skills`;
    }
  }
}

export class IgnoreInvulnerability extends Effect {
  constructor(data: any, caster: number) {
    super(data, caster);
  }

  functionality(char: Character, origin: Skill) {
    char.getDebuffs().ignoreInvulnerability = true;
  }

  generateToolTip() {
    this.message = "This character cannot become invulnerable";
  }
}
